import {
  REST,
  Routes,
  Client,
  GatewayIntentBits,
  Events,
  TextChannel,
} from "discord.js";
import dotenv from "dotenv";
import schedule from "node-schedule";
import { extractEnv } from "./extract-env";
import { configure, getFileSink, getLogger } from "@logtape/logtape";

await configure({
  sinks: {
    file: getFileSink("mikiko.log"),
  },
  filters: {},
  loggers: [{ category: ["my-app"], lowestLevel: "info", sinks: ["file"] }],
});

const logger = getLogger(["my-app"]);

dotenv.config();
const { DISCORD_BOT_TOKEN, DISCORD_CLIENT_ID, CHAT_CHANNEL_ID } = extractEnv([
  "DISCORD_BOT_TOKEN",
  "DISCORD_CLIENT_ID",
  "CHAT_CHANNEL_ID",
]);

const commands = [
  {
    name: "ping",
    description: "Replies with Pong!",
  },
];

const rest = new REST({ version: "10" }).setToken(DISCORD_BOT_TOKEN);

try {
  console.log("Started refreshing application (/) commands.");

  await rest.put(Routes.applicationCommands(DISCORD_CLIENT_ID), {
    body: commands,
  });

  console.log("Successfully reloaded application (/) commands.");
} catch (error) {
  console.error(error);
}

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildMessageReactions,
  ],
});

client.on(Events.ClientReady, () => {
  console.log(`Logged in as ${client.user?.tag}!`);
});

client.on(Events.InteractionCreate, async (interaction) => {
  try {
    logger.info("InteractionCreate -> userId: {userId}", {
      userId: interaction.user.id,
    });
    if (!interaction.isChatInputCommand()) return;

    if (interaction.commandName === "ping") {
      await interaction.reply("Pong!");
    }
  } catch (error) {
    logger.error("InteractionCreate -> error: {error}", {
      error: error,
    });
  }
});

// Áô∫Ë®Ä„Å´ÂØæ„Åó„Å¶3%„ÅÆÁ¢∫Áéá„Åß„Åä„Åª^„Äú„ÇÑ„ÅØ„Åà^„Äú„Å™„Å©„ÇíËøî‰ø°„ÇíËøî„ÅôÔºàÊôÇÈñìÂ∏Ø„Å´„Çà„Å£„Å¶Áô∫Ë®ÄÁ¢∫Áéá„ÇíÂ§âÊõ¥„Åó„Å¶„ÇÇÊ•Ω„Åó„ÅÑ„Åã„ÇÇÔºâ
client.on(Events.MessageCreate, async (message) => {
  // Bot„Åã„Å©„ÅÜ„Åã„ÇíÂà§ÂÆö„Åô„Çã
  if (message.author.bot) {
    return;
  }
  logger.info("MessageCreate -> userId: {userId}", {
    userId: message.author.id,
  });

  // 3%„ÅÆÁ¢∫Áéá„Åß `„Åä„Åª^„Äú` „Åã `„ÅØ„Åà^„Äú` „ÇíÁô∫Ë®Ä„Åô„Çã
  if (Math.random() >= 0.03) {
    return;
  }
  if (Math.random() < 0.7) {
    message.channel.send("„Åä„Åª^„Äú");
  } else {
    message.channel.send("„ÅØ„Åà^„Äú");
  }
});

// „Éá„Ç£„Çπ„Ç≥„Éº„Éâ„Å´Ë™∞„Åã„ÅåÂÖ•„Å£„Åü„Çâ"{username}„ÅåÂÖ•„Å£„Åü„Çè„Çà„Äú!!"„Å®Áô∫Ë®Ä„Åô„Çã
client.on(Events.VoiceStateUpdate, (oldState, newState) => {
  logger.info("VoiceStateUpdate -> userId: {userId}", {
    userId: newState.member?.id,
  });
  // „Éü„É•„Éº„Éà„Åß„ÇÇÂèçÂøú„Åó„Å¶„Åó„Åæ„ÅÜ„ÅÆ„ÅßÁÑ°Ë¶ñÁî®
  const statusChk =
    oldState.serverDeaf === newState.serverDeaf &&
    oldState.serverMute === newState.serverMute &&
    oldState.selfDeaf === newState.selfDeaf &&
    oldState.selfMute === newState.selfMute &&
    oldState.selfVideo === newState.selfVideo &&
    oldState.streaming === newState.streaming;

  if ((statusChk == true || oldState.serverDeaf == null) && newState.channel) {
    //„ÉÅ„É£„É≥„Éç„É´„Å´ÂÖ•„Å£„Å¶„Åç„Åü„Å®„Åç„ÅÆÂá¶ÁêÜ
    (client.channels.cache.get(CHAT_CHANNEL_ID) as TextChannel).send(
      `${newState.member?.displayName}„Åå${newState.channel.name}„ÉÅ„É£„É≥„Éç„É´„Å´ÂÖ•„Å£„Åü„Çè„Çà„Äú!!`
    );
  } else if (statusChk && oldState.channel) {
    // „ÉÅ„É£„É≥„Éç„É´„Åã„ÇâÂá∫„Åü„Å®„Åç„ÅÆÂá¶ÁêÜ
    (client.channels.cache.get(CHAT_CHANNEL_ID) as TextChannel).send(
      `${newState.member?.displayName}„Åå${oldState.channel?.name}„ÉÅ„É£„É≥„Éç„É´„Åã„ÇâÊäú„Åë„Åü„Çè„Çà„Äú!!`
    );
  }
});

// ÂçíÁ†î„ÅÆÊôÇÈñì„Å´„Å™„Çã„Å®"„Åø„Å™„Åï„ÇìÂçíÁ†î„ÅÆÊôÇÈñì„Åß„Åô„Çè„Çà"„Å®@everyone„ÅÆ„É°„É≥„Ç∑„Éß„É≥„Çí„Åó„Å¶Áô∫Ë®Ä„Çí„Åô„Çã
type Lecture = {
  name: string;
  startTime: schedule.Spec;
  endTime: schedule.Spec;
};

const GraduationResearchScheduleList: Lecture[] = [
  {
    name: "ÊúàÊõú2Èôê",
    startTime: { hour: 10, minute: 30, dayOfWeek: 1 },
    endTime: { hour: 12, minute: 0, dayOfWeek: 1 },
  },
  {
    name: "ÊúàÊõú3Èôê",
    startTime: { hour: 12, minute: 50, dayOfWeek: 1 },
    endTime: { hour: 14, minute: 20, dayOfWeek: 1 },
  },
  {
    name: "ÁÅ´Êõú3Èôê",
    startTime: { hour: 12, minute: 50, dayOfWeek: 2 },
    endTime: { hour: 14, minute: 20, dayOfWeek: 2 },
  },
  {
    name: "ÁÅ´Êõú4Èôê",
    startTime: { hour: 14, minute: 30, dayOfWeek: 2 },
    endTime: { hour: 16, minute: 0, dayOfWeek: 2 },
  },
  {
    name: "Ê∞¥Êõú4Èôê",
    startTime: { hour: 14, minute: 30, dayOfWeek: 3 },
    endTime: { hour: 16, minute: 0, dayOfWeek: 3 },
  },
  {
    name: "Êú®Êõú4Èôê",
    startTime: { hour: 14, minute: 30, dayOfWeek: 4 },
    endTime: { hour: 16, minute: 0, dayOfWeek: 4 },
  },
  {
    name: "ÈáëÊõú3Èôê",
    startTime: { hour: 12, minute: 50, dayOfWeek: 5 },
    endTime: { hour: 14, minute: 20, dayOfWeek: 5 },
  },
  {
    name: "ÈáëÊõú4Èôê",
    startTime: { hour: 14, minute: 30, dayOfWeek: 6 },
    endTime: { hour: 16, minute: 0, dayOfWeek: 6 },
  },
];

// ÂçíÁ†îÊôÇÈñìÂ†±ÂëäÊ©üËÉΩ„Å´ÂØæ„Åó„Å¶üñï„ÇíÁ´ã„Å¶„Å¶„Åè„Çã‰∏çÂ±ä„Åç„ÇÇ„ÅÆ„Åå„ÅÑ„Çã„ÅÆ„ÅßÁ≤õÊ∏Ö„Åô„Çã„Çà„ÅÜ„Å´„Åô„Çã
GraduationResearchScheduleList.map((lecture) => {
  schedule.scheduleJob(lecture.name + "ÈñãÂßã", lecture.startTime, async () => {
    try {
      logger.info("Scheduled Event");
      const channel = client.channels.cache.get(CHAT_CHANNEL_ID) as TextChannel;
      const message = await channel.send(
        `@everyone\n„Åø„Å™„Åï„ÇìÂçíÁ†î„ÅÆÊôÇÈñì„Åß„Åô„Çè„Çà„ÄÇ„Åä„Åª„Åª„Åª„ÅªÔºÅ`
      );

      const collector = message.createReactionCollector({
        filter: (reaction, user) => reaction.emoji.name === "üñï" && !user.bot,
        time: 600_000,
      });

      collector.on("collect", (reaction, user) => {
        channel.send(`${user.displayName} >> You punk! üñï`);
      });
    } catch (error) {
      logger.error("Scheduled Event -> error: {error}", {
        error: error,
      });
      console.error("„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„Ç®„É©„Éº:", error);
    }
  });

  schedule.scheduleJob(lecture.name + "ÁµÇ‰∫Ü", lecture.endTime, async () => {
    try {
      logger.info("Scheduled Event");
      const channel = client.channels.cache.get(CHAT_CHANNEL_ID) as TextChannel;
      const message = await channel.send(
        `@everyone\n„Åø„Å™„Åï„ÇìÂçíÁ†î„ÅîËã¶Âä¥Êßò„Åß„Åô„Çè„Çà„ÄÇ„Åä„Åª„Åª„Åª„ÅªÔºÅ`
      );

      const collector = message.createReactionCollector({
        filter: (reaction, user) =>
          (reaction.emoji.name === "üñï" ||
            reaction.emoji.name === "üëé" ||
            reaction.emoji.name === "üí©") &&
          !user.bot,
        time: 600_000,
      });

      collector.on("collect", (reaction, user) => {
        channel.send(`${user.displayName} >> You punk! üñï`);
      });
    } catch (error) {
      logger.error("Scheduled Event -> error: {error}", {
        error: error,
      });
      console.error("„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„Ç®„É©„Éº:", error);
    }
  });
});

client.login(DISCORD_BOT_TOKEN);
